--- a/drivers/irqchip/irq-sp-intc.c	2022-07-18 02:20:46.859683052 +0300
+++ a/drivers/irqchip/irq-sp-intc.c	2022-07-18 19:24:22.240069320 +0300
@@ -60,9 +60,6 @@
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
 #define HW_IRQ_GPIO_INT0                120
 #define HW_IRQ_GPIO_INT7                127
-#define SP_IRQ_TYPE_EDGE_NONE           0x00
-#define SP_IRQ_TYPE_EDGE_RISING         0x01
-#define SP_IRQ_TYPE_EDGE_FALLING        0x02
 #define SP_IRQ_TYPE_EDGE_ACTIVE         0x80
 static char edge_trigger[SP_INTC_HWIRQ_MAX-SP_INTC_HWIRQ_MIN];
 #endif
@@ -90,17 +87,21 @@
 		return;
 
 	idx = data->hwirq / 32;
-	mask = (1 << (data->hwirq % 32));
+	mask = BIT(data->hwirq % 32);
+//if ( data->hwirq == 120) pr_debug( "%s(%lu) v:%X\n", __FUNCTION__, data->hwirq, edge_trigger[data->hwirq]);
 
 	spin_lock(&sp_intc.lock);
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-	if (edge_trigger[data->hwirq] & (SP_IRQ_TYPE_EDGE_RISING|SP_IRQ_TYPE_EDGE_FALLING)) {
+	if (edge_trigger[data->hwirq] & IRQ_TYPE_EDGE_BOTH) {
 		u32 trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
-		if (edge_trigger[data->hwirq] == SP_IRQ_TYPE_EDGE_RISING) {
+//if ( data->hwirq == 120) pr_debug( "%s() trig_lvl0:%X\n", __FUNCTION__, trig_lvl);
+// fix?
+		if (edge_trigger[data->hwirq] == IRQ_TYPE_EDGE_RISING) {
 			trig_lvl |= mask;
 		} else {
 			trig_lvl &= ~mask;
 		}
+//if ( data->hwirq == 120) pr_debug( "%s() trig_lvl1:%X\n", __FUNCTION__, trig_lvl);
 		writel_relaxed(trig_lvl, &sp_intc.g0->intr_polarity[idx]);
 		edge_trigger[data->hwirq] |= SP_IRQ_TYPE_EDGE_ACTIVE;
 	}
@@ -146,12 +147,14 @@
 
 static int sp_intc_set_type(struct irq_data *data, unsigned int flow_type)
 {
-	u32 idx, mask;
+	u32 idx, mask, pol, et;
 	u32 edge_type; /* 0=level, 1=edge */
 	u32 trig_lvl;  /* 0=high, 1=low */
 	unsigned long flags;
+	int ret = IRQ_SET_MASK_OK;
 
 	dprn("%s: hwirq=%lu type=%u\n", __func__, data->hwirq, flow_type);
+//if ( data->hwirq == 120) pr_debug( "%s(%lu,%d)\n", __FUNCTION__, data->hwirq, flow_type);
 
 	if ((data->hwirq < sp_intc.hwirq_start) || (data->hwirq >= sp_intc.hwirq_end))
 		return -EBADR;
@@ -164,67 +167,52 @@
 		irq_set_chip_handler_name_locked(data, &sp_intc_chip,
 						   handle_edge_irq, NULL);
 
-	idx = data->hwirq / 32;
-
-	spin_lock_irqsave(&sp_intc.lock, flags);
-
-	edge_type = readl_relaxed(&sp_intc.g0->intr_type[idx]);
-	trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
-	mask = (1 << (data->hwirq % 32));
+	edge_trigger[data->hwirq] = IRQ_TYPE_NONE;
 
 	switch (flow_type) {
 	case IRQ_TYPE_EDGE_RISING:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		if ((data->hwirq >= HW_IRQ_GPIO_INT0) && (data->hwirq <= HW_IRQ_GPIO_INT7)) {
-			edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_RISING;
-			writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
-		} else {
-			writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
-		}
-#else
-		writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
-#endif
-		writel_relaxed((trig_lvl & ~mask), &sp_intc.g0->intr_polarity[idx]);
-		break;
 	case IRQ_TYPE_EDGE_FALLING:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		if ((data->hwirq >= HW_IRQ_GPIO_INT0) && (data->hwirq <= HW_IRQ_GPIO_INT7)) {
-			edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_FALLING;
-			writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
-		} else {
-			writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
-		}
-#else
-		writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
-#endif
-		writel_relaxed((trig_lvl | mask), &sp_intc.g0->intr_polarity[idx]);
+	case IRQ_TYPE_EDGE_BOTH:
+		edge_trigger[data->hwirq] = flow_type;
 		break;
 	case IRQ_TYPE_LEVEL_HIGH:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
-#endif
-		writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
-		writel_relaxed((trig_lvl & ~mask), &sp_intc.g0->intr_polarity[idx]);
-		break;
 	case IRQ_TYPE_LEVEL_LOW:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
-#endif
-		writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
-		writel_relaxed((trig_lvl | mask), &sp_intc.g0->intr_polarity[idx]);
 		break;
 	default:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
-#endif
-		spin_unlock_irqrestore(&sp_intc.lock, flags);
 		pr_err("%s: type=%d\n", __func__, flow_type);
 		return -EBADR;
 	}
 
+	idx = data->hwirq / 32;
+
+	spin_lock_irqsave(&sp_intc.lock, flags);
+
+	edge_type = readl_relaxed(&sp_intc.g0->intr_type[idx]);
+	trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
+	mask = BIT(data->hwirq % 32);
+
+	pol = (trig_lvl | mask);
+	if ( flow_type == IRQ_TYPE_LEVEL_HIGH) pol = (trig_lvl & ~mask);
+	if ( flow_type == IRQ_TYPE_EDGE_RISING) pol = (trig_lvl & ~mask);
+
+//if ( data->hwirq == 120) pr_debug( "%s(%lu,%d) 0 et:%X tl:%X [%X]\n", __FUNCTION__, data->hwirq, flow_type, edge_type, trig_lvl, edge_trigger[data->hwirq]);
+	if ( flow_type & IRQ_TYPE_EDGE_BOTH) {
+		et = (edge_type | mask);
+#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
+		if ((data->hwirq >= HW_IRQ_GPIO_INT0) && (data->hwirq <= HW_IRQ_GPIO_INT7)) {
+			et = (edge_type & ~mask);
+		}
+#endif
+	} else {
+		et = (edge_type & ~mask);
+	}
+//if ( data->hwirq == 120) pr_debug( "%s(%lu,%d) 1 et:%X tl:%X [%X]\n", __FUNCTION__, data->hwirq, flow_type, edge_type, trig_lvl, edge_trigger[data->hwirq]);
+	writel_relaxed( et, &sp_intc.g0->intr_type[idx]);
+	writel_relaxed( pol, &sp_intc.g0->intr_polarity[idx]);
+
 	spin_unlock_irqrestore(&sp_intc.lock, flags);
 
-	return IRQ_SET_MASK_OK;
+	return ret;
 }
 
 /* prio=1 (normal), prio=0 (dedicated) */
@@ -302,14 +290,15 @@
 	chained_irq_enter(host_chip, desc);
 
 	while ((hwirq = sp_intc_get_ext0_irq()) >= 0) {
+//if ( hwirq == 120) pr_debug( "%s() 0 irq:%lu et:%X tl:%X [%X]\n", __FUNCTION__, hwirq, edge_trigger[hwirq]);
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
 		if (edge_trigger[hwirq] & SP_IRQ_TYPE_EDGE_ACTIVE) {
 			u32 idx = hwirq / 32;
 			u32 trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
-			u32 mask = 1 << (hwirq % 32);
+			u32 mask = BIT(hwirq % 32);
 
 			edge_trigger[hwirq] &= ~SP_IRQ_TYPE_EDGE_ACTIVE;
-			if (edge_trigger[hwirq] == SP_IRQ_TYPE_EDGE_RISING) {
+			if (edge_trigger[hwirq] == IRQ_TYPE_EDGE_RISING) {
 				trig_lvl &= ~mask;
 			} else {
 				trig_lvl |= mask;
@@ -317,6 +306,7 @@
 			writel_relaxed(trig_lvl, &sp_intc.g0->intr_polarity[idx]);
 		} else
 #endif
+//if ( hwirq == 120) pr_debug( "%s() 1 irq:%lu et:%X tl:%X [%X]\n", __FUNCTION__, hwirq, edge_trigger[hwirq]);
 		generic_handle_irq(irq_find_mapping(sp_intc.domain, (unsigned int)hwirq));
 	}
 
@@ -331,14 +321,15 @@
 	chained_irq_enter(host_chip, desc);
 
 	while ((hwirq = sp_intc_get_ext1_irq()) >= 0) {
+//if ( hwirq == 120) pr_debug( "%s() 0 irq:%lu et:%X tl:%X [%X]\n", __FUNCTION__, hwirq, edge_trigger[hwirq]);
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
 		if (edge_trigger[hwirq] & SP_IRQ_TYPE_EDGE_ACTIVE) {
 			u32 idx = hwirq / 32;
 			u32 trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
-			u32 mask = 1 << (hwirq % 32);
+			u32 mask = BIT(hwirq % 32);
 
 			edge_trigger[hwirq] &= ~SP_IRQ_TYPE_EDGE_ACTIVE;
-			if (edge_trigger[hwirq] == SP_IRQ_TYPE_EDGE_RISING) {
+			if (edge_trigger[hwirq] == IRQ_TYPE_EDGE_RISING) {
 				trig_lvl &= ~mask;
 			} else {
 				trig_lvl |= mask;
@@ -346,6 +337,7 @@
 			writel_relaxed(trig_lvl, &sp_intc.g0->intr_polarity[idx]);
 		} else
 #endif
+//if ( hwirq == 120) pr_debug( "%s() 1 irq:%lu et:%X tl:%X [%X]\n", __FUNCTION__, hwirq, edge_trigger[hwirq]);
 		generic_handle_irq(irq_find_mapping(sp_intc.domain, (unsigned int)hwirq));
 	}
 
