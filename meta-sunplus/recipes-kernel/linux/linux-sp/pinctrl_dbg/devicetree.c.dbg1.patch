--- a/drivers/pinctrl/devicetree.c	2019-02-15 10:44:40.167432745 +0300
+++ a/drivers/pinctrl/devicetree.c	2019-02-16 13:20:59.242973840 +0300
@@ -204,18 +204,21 @@
 	struct device_node *np_config;
 
 	/* CONFIG_OF enabled, p->dev not instantiated from DT */
+pr_err("sppctl: %s():%d\n", __FUNCTION__, __LINE__);
 	if (!np) {
 		if (of_have_populated_dt())
 			dev_dbg(p->dev,
 				"no of_node; not parsing pinctrl DT\n");
 		return 0;
 	}
+pr_err("sppctl: %s():%d\n", __FUNCTION__, __LINE__);
 
 	/* We may store pointers to property names within the node */
 	of_node_get(np);
 
 	/* For each defined state ID */
 	for (state = 0; ; state++) {
+pr_err("sppctl: %s():%d state:%d\n", __FUNCTION__, __LINE__, state);
 		/* Retrieve the pinctrl-* property */
 		propname = kasprintf(GFP_KERNEL, "pinctrl-%d", state);
 		prop = of_find_property(np, propname, &size);
@@ -238,6 +241,7 @@
 		 * than dynamically allocate it and have to free it later,
 		 * just point part way into the property name for the string.
 		 */
+pr_err("sppctl: %s():%d ret:%d\n", __FUNCTION__, __LINE__, ret);
 		if (ret < 0) {
 			/* strlen("pinctrl-") == 8 */
 			statename = prop->name + 8;
@@ -245,6 +249,7 @@
 
 		/* For every referenced pin configuration node in it */
 		for (config = 0; config < size; config++) {
+pr_err("sppctl: %s():%d config:%d\n", __FUNCTION__, __LINE__, config);
 			phandle = be32_to_cpup(list++);
 
 			/* Look up the pin configuration node */
@@ -261,6 +266,7 @@
 			ret = dt_to_map_one_config(p, pctldev, statename,
 						   np_config);
 			of_node_put(np_config);
+pr_err("sppctl: %s():%d ret:%d\n", __FUNCTION__, __LINE__, ret);
 			if (ret < 0)
 				goto err;
 		}
@@ -268,11 +274,13 @@
 		/* No entries in DT? Generate a dummy state table entry */
 		if (!size) {
 			ret = dt_remember_dummy_state(p, statename);
+pr_err("sppctl: %s():%d ret:%d\n", __FUNCTION__, __LINE__, ret);
 			if (ret < 0)
 				goto err;
 		}
 	}
 
+pr_err("sppctl: %s():%d /\n", __FUNCTION__, __LINE__);
 	return 0;
 
 err:
