--- a/drivers/irqchip/irq-sp-intc.c	2022-07-16 00:40:05.036327351 +0300
+++ a/drivers/irqchip/irq-sp-intc.c	2022-07-16 13:25:37.239786086 +0300
@@ -60,9 +60,6 @@
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
 #define HW_IRQ_GPIO_INT0                120
 #define HW_IRQ_GPIO_INT7                127
-#define SP_IRQ_TYPE_EDGE_NONE           0x00
-#define SP_IRQ_TYPE_EDGE_RISING         0x01
-#define SP_IRQ_TYPE_EDGE_FALLING        0x02
 #define SP_IRQ_TYPE_EDGE_ACTIVE         0x80
 static char edge_trigger[SP_INTC_HWIRQ_MAX-SP_INTC_HWIRQ_MIN];
 #endif
@@ -91,16 +88,21 @@
 
 	idx = data->hwirq / 32;
 	mask = (1 << (data->hwirq % 32));
+pr_debug( "%s(%lu) v:%X\n", __FUNCTION__, data->hwirq, edge_trigger[data->hwirq]);
 
 	spin_lock(&sp_intc.lock);
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-	if (edge_trigger[data->hwirq] & (SP_IRQ_TYPE_EDGE_RISING|SP_IRQ_TYPE_EDGE_FALLING)) {
+	if (edge_trigger[data->hwirq] & IRQ_TYPE_EDGE_BOTH) {
 		u32 trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
-		if (edge_trigger[data->hwirq] == SP_IRQ_TYPE_EDGE_RISING) {
+pr_debug( "%s() trig_lvl0:%X\n", __FUNCTION__, trig_lvl);
+// fix?
+		if (edge_trigger[data->hwirq] == IRQ_TYPE_EDGE_RISING ||
+		    edge_trigger[data->hwirq] == IRQ_TYPE_EDGE_BOTH) {
 			trig_lvl |= mask;
 		} else {
 			trig_lvl &= ~mask;
 		}
+pr_debug( "%s() trig_lvl1:%X\n", __FUNCTION__, trig_lvl);
 		writel_relaxed(trig_lvl, &sp_intc.g0->intr_polarity[idx]);
 		edge_trigger[data->hwirq] |= SP_IRQ_TYPE_EDGE_ACTIVE;
 	}
@@ -146,12 +148,14 @@
 
 static int sp_intc_set_type(struct irq_data *data, unsigned int flow_type)
 {
-	u32 idx, mask;
+	u32 idx, mask, pol, et;
 	u32 edge_type; /* 0=level, 1=edge */
 	u32 trig_lvl;  /* 0=high, 1=low */
 	unsigned long flags;
+	int ret = IRQ_SET_MASK_OK;
 
 	dprn("%s: hwirq=%lu type=%u\n", __func__, data->hwirq, flow_type);
+pr_debug( "%s(%lu,%d)\n", __FUNCTION__, data->hwirq, flow_type);
 
 	if ((data->hwirq < sp_intc.hwirq_start) || (data->hwirq >= sp_intc.hwirq_end))
 		return -EBADR;
@@ -172,59 +176,42 @@
 	trig_lvl = readl_relaxed(&sp_intc.g0->intr_polarity[idx]);
 	mask = (1 << (data->hwirq % 32));
 
+	pol = (trig_lvl | mask);
+	if ( flow_type == IRQ_TYPE_LEVEL_HIGH) pol = (trig_lvl & ~mask);
+	if ( flow_type == IRQ_TYPE_EDGE_RISING) pol = (trig_lvl & ~mask);
+
+pr_debug( "%s(%lu,%d) 0 et:%X tl:%X [%X]\n", __FUNCTION__, data->hwirq, flow_type, edge_type, trig_lvl, edge_trigger[data->hwirq]);
 	switch (flow_type) {
 	case IRQ_TYPE_EDGE_RISING:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		if ((data->hwirq >= HW_IRQ_GPIO_INT0) && (data->hwirq <= HW_IRQ_GPIO_INT7)) {
-			edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_RISING;
-			writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
-		} else {
-			writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
-		}
-#else
-		writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
-#endif
-		writel_relaxed((trig_lvl & ~mask), &sp_intc.g0->intr_polarity[idx]);
-		break;
 	case IRQ_TYPE_EDGE_FALLING:
+	case IRQ_TYPE_EDGE_BOTH:
+		et = (edge_type | mask);
 #ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
 		if ((data->hwirq >= HW_IRQ_GPIO_INT0) && (data->hwirq <= HW_IRQ_GPIO_INT7)) {
-			edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_FALLING;
-			writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
-		} else {
-			writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
+			edge_trigger[data->hwirq] = flow_type;
+			et = (edge_type & ~mask);
 		}
-#else
-		writel_relaxed((edge_type | mask), &sp_intc.g0->intr_type[idx]);
 #endif
-		writel_relaxed((trig_lvl | mask), &sp_intc.g0->intr_polarity[idx]);
 		break;
 	case IRQ_TYPE_LEVEL_HIGH:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
-#endif
-		writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
-		writel_relaxed((trig_lvl & ~mask), &sp_intc.g0->intr_polarity[idx]);
-		break;
 	case IRQ_TYPE_LEVEL_LOW:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
-#endif
-		writel_relaxed((edge_type & ~mask), &sp_intc.g0->intr_type[idx]);
-		writel_relaxed((trig_lvl | mask), &sp_intc.g0->intr_polarity[idx]);
+		et = (edge_type & ~mask);
+		edge_trigger[data->hwirq] = IRQ_TYPE_NONE;
 		break;
 	default:
-#ifdef WORKAROUND_FOR_EDGE_TRIGGER_BUG
-		edge_trigger[data->hwirq] = SP_IRQ_TYPE_EDGE_NONE;
-#endif
-		spin_unlock_irqrestore(&sp_intc.lock, flags);
+		edge_trigger[data->hwirq] = IRQ_TYPE_NONE;
 		pr_err("%s: type=%d\n", __func__, flow_type);
-		return -EBADR;
+		ret = -EBADR;
+	}
+	if ( ret >= 0) {
+pr_debug( "%s(%lu,%d) 1 et:%X tl:%X [%X]\n", __FUNCTION__, data->hwirq, flow_type, edge_type, trig_lvl, edge_trigger[data->hwirq]);
+		writel_relaxed( et, &sp_intc.g0->intr_type[idx]);
+		writel_relaxed( pol, &sp_intc.g0->intr_polarity[idx]);
 	}
 
 	spin_unlock_irqrestore(&sp_intc.lock, flags);
 
-	return IRQ_SET_MASK_OK;
+	return ret;
 }
 
 /* prio=1 (normal), prio=0 (dedicated) */
@@ -309,7 +296,7 @@
 			u32 mask = 1 << (hwirq % 32);
 
 			edge_trigger[hwirq] &= ~SP_IRQ_TYPE_EDGE_ACTIVE;
-			if (edge_trigger[hwirq] == SP_IRQ_TYPE_EDGE_RISING) {
+			if (edge_trigger[hwirq] == IRQ_TYPE_EDGE_RISING) {
 				trig_lvl &= ~mask;
 			} else {
 				trig_lvl |= mask;
@@ -338,7 +325,7 @@
 			u32 mask = 1 << (hwirq % 32);
 
 			edge_trigger[hwirq] &= ~SP_IRQ_TYPE_EDGE_ACTIVE;
-			if (edge_trigger[hwirq] == SP_IRQ_TYPE_EDGE_RISING) {
+			if (edge_trigger[hwirq] == IRQ_TYPE_EDGE_RISING) {
 				trig_lvl &= ~mask;
 			} else {
 				trig_lvl |= mask;
